Схема 1:

В рассматриваемых сценариях резервирования с типом соединения "звезда" между сервисами отсутствует, поскольку предполагается, что работоспособность обеспечивается за счет инструментов кубера (HPA, VPA), наличия баз данных в кластере, снапшотов и бэкапов.

В рамках облака 1, который находится в России, и облака 2, расположенного в Европе, фронт-сервер и S3 бакет для статики размещены только в России. В связи с тем, что для нашего приложения использование CDN провайдера не представляет большого смысла, возможно включение его при увеличении объемов статического контента и их размеров с покрытием на обеих территориях. На ингрессе используется сборка NGINX + MaxMind GeoDB, что позволяет настраивать NGINX для направления запросов к "ближайшему" бэкенду с учетом местоположения пользователя.

Учитывая, что магазин продуктовый и наличие товара на складах имеет территориальный характер, а также существуют различные ценовые политики, базы данных PostgreSQL размещены каждая в своем облаке. Это также обусловлено тем, что запросы к базе данных часто являются наиболее времязатратными и, следовательно, удобнее иметь их рядом с бэкендами на гарантированных и широких каналах связи. MongoDB также размещается в каждом облаке из-за "широких" каналов связи и требований по хранению персональных данных пользователей (152-ФЗ в России, GDPR в Европе). Реплика из Европы в Россию используется только для отчетов по продажам.

Плюсы:

Экономия на аренде вычислительных мощностей.
Минимальные различия в коде продукта для разных облаков, присутствуют только адреса баз данных.
Минусы:

Возможное влияние увеличенного количества хопов на скорость работы и стабильность при прохождении трафика из Европы.
Необходимость публикации бэкенда на "белом" IP (возможно, требуется настройка фаерволла для принятия трафика только с адресов NGINX).

Схема 2:

В схеме 2 облако 1 находится в России, а облако 2 - в Европе. Расположение баз данных обусловлено теми же факторами, что и в схеме 1. Фактически оба облака полностью дублируют друг друга и представляют собой автономные системы. Маршрутизация между облаками осуществляется на основе сервисов типа GEODNS/Route53, распределяя запросы пользователей на "ближайшее" облако.

Плюсы:

Наименьшее расстояние до пользователя, что обеспечивает более высокую и стабильную работу с точки зрения пользователя и сервиса.
Схожесть схем организации обоих облаков.
Минусы:

Более дорогое решение по сравнению с схемой 1.
Требует больше изменений в коде продукта, помимо различных адресов баз данных, также другие URL для статических файлов.