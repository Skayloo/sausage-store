include:
  - project: "templates/ci"
    file: "DockerInDockerTemplate.yml"
  - template: Security/SAST.gitlab-ci.yml

variables:
  VERSION: 1.0.${CI_PIPELINE_ID}

stages:
  - build
  - test
  - notify
  - release
  - deploy

cache:
  paths:
    - frontend/dist/frontend

build-frontend-code-job:
  stage: build
  image:
    name: gcr.io/kaniko-project/executor:v1.9.0-debug
    entrypoint: [""]
  script:
    - echo "test"
    - /kaniko/executor
      --context "${CI_PROJECT_DIR}/frontend"
      --dockerfile "${CI_PROJECT_DIR}/frontend/Dockerfile"
      --destination "${CI_REGISTRY_IMAGE}/frontend:$CI_COMMIT_SHA"
      --build-arg VERSION=$VERSION
      --cache=true

upload-frontend-release:
  variables:
    GIT_STRATEGY: none
  image:
    name: gcr.io/go-containerregistry/crane:debug
    entrypoint: [ "" ]
  cache: [ ]
  stage: release
  before_script:
    - crane auth login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - crane tag $CI_REGISTRY_IMAGE/frontend:$CI_COMMIT_SHA $VERSION

sonarqube-frontend-sast:
  stage: test
  image: sonarsource/sonar-scanner-cli:latest
  variables:
    GIT_DEPTH: "0"
  script:
    - sonar-scanner -Dsonar.projectName="22_ДаниилПайдютов_ФРОНТЕНД" -Dsonar.sources=./frontend -Dsonar.projectKey=$SONAR_PROJECT_KEY_FRONT -Dsonar.host.url=$SONARQUBE_URL -Dsonar.login=$SONAR_LOGIN -Dsonar.qualitygate.wait=true

telegram-notification-frontend:
  stage: notify
  only:
    variables:
    - $CI_COMMIT_MESSAGE =~ /send notification/
  script:
    - |
     curl -X POST -H 'Content-Type: application/json' -d '{"chat_id": "-1001771539978", "text": "Frontend project build for std-022-039. Checkout -> ", "parse_mode": "markdown", "reply_markup": {"inline_keyboard": [[{"text": "@GrantRusov", "url": "'"$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_SHA/download?job=build-frontend-code-job"'"}]]}}' $TELEGRAM_NOTIFY_API
  needs:
      - build-frontend-code-job

frontend-deploy:
  stage: deploy
  image: alpine:3.18
  before_script:
    - apk add openssh-client bash docker docker-compose
    - eval $(ssh-agent -s)
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh
    - chmod 700 ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
  script:
    - docker context create remote --docker "host=ssh://$DEV_USER@$DEV_HOST"
    - docker context use remote
    - >
      export IMAGE_FRONTEND=${IMAGE_FRONTEND}:${VERSION}
      export CI_REGISTRY_USER=${CI_REGISTRY_USER}
      export CI_REGISTRY_PASSWORD=${CI_REGISTRY_PASSWORD}
      export CI_REGISTRY=${CI_REGISTRY}
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
    - docker-compose --context remote up -d frontend
